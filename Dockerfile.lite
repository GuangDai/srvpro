# Dockerfile for SRVPro Lite
# Stage 1: Build premake from source
FROM debian:bullseye as premake-builder

RUN apt update && \
    env DEBIAN_FRONTEND=noninteractive apt install -y wget build-essential p7zip-full uuid-dev && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /usr/src
RUN wget -O premake.zip https://github.com/premake/premake-core/releases/download/v5.0.0-beta7/premake-5.0.0-beta7-src.zip && \
    7z x -y -opremake premake.zip && \
    cd premake/build/gmake.unix && \
    make -j$(nproc)

# Stage 2: Build the main application with FULL static linking and hardening
FROM node:16-bullseye-slim
LABEL Author="Nanahira <nanahira@momobako.com>"

# Install essential build tools, including those needed for static dependencies.
RUN apt update && \
    env DEBIAN_FRONTEND=noninteractive apt install -y wget git build-essential p7zip-full python3 python-is-python3 libssl-dev libreadline-dev libncurses-dev && \
    rm -rf /var/lib/apt/lists/*

# Copy application source and install node modules
COPY . /ygopro-server
WORKDIR /ygopro-server
RUN npm ci && \
    mkdir config decks replays logs

# Copy the premake binary from the first stage
COPY --from=premake-builder /usr/src/premake/bin/release/premake5 /usr/bin/premake5

# --- Build ygopro with all dependencies statically linked ---
WORKDIR /ygopro-server/ygopro-build

# Clone ygopro source
RUN git clone --branch=server --recursive --depth=1 https://github.com/GuangDai/ygopro . && \
    git submodule foreach git checkout master

# --- Manually build all dependencies as static libraries (.a) ---

# Build libevent
RUN wget -O libevent.tar.gz https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz && \
    tar xf libevent.tar.gz && \
    cd libevent-2.1.12-stable && \
    ./configure --disable-shared --enable-static --disable-openssl --prefix=/usr/local && \
    make -j$(nproc) && make install && \
    cd .. && rm -rf libevent*

# Build lua
RUN wget -O lua.tar.gz https://www.lua.org/ftp/lua-5.3.6.tar.gz && \
    tar zxf lua.tar.gz && \
    cd lua-5.3.6 && \
    make generic MYCFLAGS="-fPIC" && make install && \
    cd .. && rm -rf lua*

# Build sqlite3
RUN wget -O sqlite.zip https://www.sqlite.org/2022/sqlite-amalgamation-3390400.zip && \
    7z x -y -osqlite3 sqlite.zip && \
    # FIX: The unzipped directory contains a version number. Use a wildcard to enter it.
    cd sqlite-amalgamation-* && \
    gcc -c -fPIC sqlite3.c && \
    ar rcs libsqlite3.a sqlite3.o && \
    install -D libsqlite3.a /usr/local/lib/libsqlite3.a && \
    install -D sqlite3.h /usr/local/include/sqlite3.h && \
    cd .. && rm -rf sqlite*

# --- Now, build the main ygopro application ---
RUN premake5 gmake && \
    cd build && \
    # ===================================================================
    # CRITICAL FIX & PROACTIVE ENHANCEMENT:
    # 1. -march=x86-64-v2: Ensures compatibility with older CPUs.
    # 2. -static...: Creates a self-contained executable.
    # 3. Explicitly link common static dependencies (-lpthread, -ldl) to
    #    prevent linking errors at the final stage.
    # ===================================================================
    make CXXFLAGS="-O2 -fPIC -march=x86-64-v2 -fstack-protector-strong -D_FORTIFY_SOURCE=2" \
         LDFLAGS="-static -static-libgcc -static-libstdc++ -Wl,-z,relro,-z,now -lpthread -ldl" \
         config=release -j$(nproc)

# --- Final cleanup and setup ---
WORKDIR /ygopro-server
RUN mv /ygopro-server/ygopro-build/bin/release/ygopro . && \
    strip ygopro && \
    mkdir -p ./ygopro/replay ./ygopro/expansions && \
    rm -rf /ygopro-server/ygopro-build

EXPOSE 7911 7922 7933
# VOLUME [ /ygopro-server/config, /ygopro-server/decks, /ygopro-server/replays ]
