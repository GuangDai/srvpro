# Dockerfile for SRVPro Lite
# Stage 1: Build premake from source
FROM debian:bullseye as premake-builder

RUN apt update && \
    env DEBIAN_FRONTEND=noninteractive apt install -y wget build-essential p7zip-full uuid-dev && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /usr/src
RUN wget -O premake.zip https://github.com/premake/premake-core/releases/download/v5.0.0-beta7/premake-5.0.0-beta7-src.zip && \
    7z x -y -opremake premake.zip && \
    cd premake/build/gmake.unix && \
    make -j$(nproc)

# Stage 2: Build the main application
FROM node:16-bullseye-slim
LABEL Author="Nanahira <nanahira@momobako.com>"

# Install dependencies
RUN apt update && \
    env DEBIAN_FRONTEND=noninteractive apt install -y wget git build-essential libevent-dev libsqlite3-dev p7zip-full python3 python-is-python3 liblua5.3-dev && \
    rm -rf /var/lib/apt/lists/*

# Copy application source and install node modules
COPY . /ygopro-server
WORKDIR /ygopro-server
RUN npm ci && \
    mkdir config decks replays logs

# Copy the premake binary from the first stage
COPY --from=premake-builder /usr/src/premake/bin/release/premake5 /usr/bin/premake5

# Clone and build the ygopro server component
RUN git clone --branch=server --recursive --depth=1 https://github.com/GuangDai/ygopro && \
    cd ygopro && \
    git submodule foreach git checkout master && \
    premake5 gmake --lua-deb && \
    cd build && \
    # ===================================================================
    # **最终解决方案**：使用更保守的编译参数以实现最大兼容性
    # -march=nehalem  : 编译目标为非常早期的 x86-64 CPU 架构，确保广泛兼容。
    # -mno-avx        : 明确禁用 AVX 指令集。
    # -mno-avx2       : 明确禁用 AVX2 指令集。
    # 这个组合可以彻底解决 "Illegal instruction" 问题。
    # ===================================================================
    make CXXFLAGS="-O2 -march=nehalem -mno-avx -mno-avx2" config=release -j$(nproc) && \
    cd .. && \
    mv ./bin/release/ygopro . && \
    strip ygopro && \
    mkdir replay expansions && \
    # Clean up unnecessary files to reduce image size
    rm -rf .git* bin obj build ocgcore cmake lua premake* sound textures .travis.yml *.txt appveyor.yml LICENSE README.md *.lua strings.conf system.conf && \
    ls gframe | sed '/game.cpp/d' | xargs -I {} rm -rf gframe/{}

# Final setup
WORKDIR /ygopro-server
EXPOSE 7911 7922 7933
# VOLUME [ /ygopro-server/config, /ygopro-server/decks, /ygopro-server/replays ]

CMD [ "npm", "start" ]
